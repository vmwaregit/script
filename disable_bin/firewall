

#!/bin/sh
  


# deny-ip
BADIPS=""

# impossible private-ip 
IMPOSSIBLE_IPS="10.0.0.0/8 172.16.0.0/12 "

# allow in tcp connect -ip & services
# 137 138 139 is Samba
# 22 is ssh
# 6889 is SVN
# 6890 is rtorrent
IN_TCP_PORTALLOWED=" 22 25 137 138 139 6889  6890 6891 9527"

# allow in UDP connect services
# 6890 is rotrrent
IN_UDP_PORTALLOWED=" 9 22 25 137 138 139 6890 6891"

# allow in ICMP connect  
IN_ICMP_ALLOWED=""

# no two-way restrain  in to out connect set"0" 
# two-way restrain in to out connect set "1"
EGRESS="0"

# when use two-way restrain , allow in to out tcp connects 
OUT_TCP_PORTALLOWED=""

# when use two-way restrain , allow in to out udp connects
OUT_UDP_PORTALLOWED=""

# when use two-way restrain , allow in to out icmp connects
OUT_ICMP_ALLOWED=""

# whether or not record all iptables drops package
DROPLOG="0"

# whether or not dowload DShield.org's blacklist to block 
DSHIELD="1"

##  fllows is scripts

# load related kernal module
modprobe ip_tables
modprobe ip_conntrack
modprobe ip_conntrack_ftp
modprobe ip_conntrack_irc

# clear old iptables all rule 
echo -n "Initiating iptables..."
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -t filter -F
iptables -t nat -F
iptables -t filter -X
iptables -t nat -X
echo "ok"

# if $DSHIELD value is "1", then downloaad Dshield.org blacklist
# use blacklist's ip to block 
if [ "$DSHIELD" = "1" ]; then
   echo -n "Getting the DShield Block List..."
   `wget http://feeds.dshield.org/block.txt`
# origionprogram is  -> `lynx --dump http://feeds.dshield.org/block.txt | \
#    note  67,71,74 lines
   BADIPS="$BADIPS
     `cat block.txt | \
      awk '/^[1-9]/ {print $1 "/" $3}'`"
   echo "ok"
  `rm -f block.txt`
fi

# if user add "start" parameter,then set $skiptest value is "1", 
# so skip test mode , set all rules , and not clear again
[ "$1" = "start" ] && skiptest="1"

## set kernal's safe-releated parameter
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
echo 1 > /proc/sys/net/ipv4/tcp_syncookies
echo 3 > /proc/sys/net/ipv4/tcp_retries1
echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout
echo 1400 > /proc/sys/net/ipv4/tcp_keepalive_time
echo 0 > /proc/sys/net/ipv4/tcp_window_scaling
echo 0 > /proc/sys/net/ipv4/tcp_sack
echo 0 > /proc/sys/net/ipv4/tcp_timestamps

## fllows start set firewall rules 

echo -n "Setting rules..." 

# set INPUT¡BOUTPUT¡BFORWARD chain pre-set filter principles , if packages not conform
# with all chains'rule then DROP 
iptables -P INPUT DROP 
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

# allow pass through lookback interface package in and out 
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# not allow ip to pretend to be local ip-net-section 
iptables -A INPUT -i ! lo -s 127.0.0.0/8 -j DROP
iptables -A OUTPUT -o ! lo -d 127.0.0.0/8 -j DROP

# create a new chain , name is BADPKT 
iptables -N BADPKT
# if DROPLOG value is "1", then record all package that into BADPKT
if [ "$DROPLOG" = "1" ]; then
   iptables -A BADPKT -j LOG --log-prefix "** Firewall BADPKT **"
fi
# DROP all package that into BADPKT's chain
iptables -A BADPKT -j DROP

# handle all alleged package to  BADPKT's chain
iptables -A INPUT -m state --state INVALID -j BADPKT
iptables -A INPUT -p tcp ! --syn -m state --state NEW -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j BADPKT
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j BADPKT
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j BADPKT
iptables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,URG URG -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL FIN -j BADPKT

# allow package out, when dport is 53 and type is UDP , so can refer to DNS
iptables -A OUTPUT -p udp -m state --state NEW --dport 53 -j ACCEPT

# allow package pass through when connects is established and responsed 
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

## bloak specific IP's connects 
# create a new chain , name is BADIP
iptables -N BADIP
# if DROPLOG value is "1" , then record all package into BADIP 
if [ "$DROPLOG" = "1" ]; then
   iptables -A BADIP -j LOG --log-prefix "** Firewall BADIP **"
fi
# DROP BADIP all package 
iptables -A BADIP -j DROP

# block specific IP connects 
for ip in $BADIPS $IMPOSSIBLE_IPS ; do
   iptables -A INPUT -s $ip -j BADIP
done

# allow specific TCP-port's new in-connects 
for i in $IN_TCP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"

   iptables -A INPUT -p tcp $ipt_option --dport $port \
         --syn -m state --state NEW -j ACCEPT
done

# allow specific UDP-port's new in-connects 
for i in $IN_UDP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"

   iptables -A INPUT -p udp $ipt_option --dport $port \
         -m state --state NEW -j ACCEPT
done

# allow specific ICMP-package's in 
for i in $IN_ICMP_ALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   type="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"
   
   iptables -A INPUT -p icmp $ipt_option --icmp-type $type \
      -m state --state NEW -j ACCEPT
done

# if EGRESS values is "1", then restrain out-connect 
if [ $EGRESS = "1" ]; then

# allow specific TCP-PORT's new out-connects 
for i in $OUT_TCP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p tcp $ipt_option --dport $port \
         --syn -m state --state NEW -j ACCEPT
done

# allow specific UDP-PORT's new out-connects 
for i in $OUT_UDP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option
   
   port="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p udp $ipt_option --dport $port \
         -m state --state NEW -j ACCEPT
done

# allow specific ICMP-package's out 
for i in $OUT_ICMP_ALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   type="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p icmp $ipt_option --icmp-type $type \
      -m state --state NEW -j ACCEPT
done
fi

# if ERGESS value is not "1" , then allow all out-connects 
if [ ! "$EGRESS" = "1" ]; then
   iptables -A OUTPUT -m state --state NEW -j ACCEPT
fi

# if DROPLOG is "1" , so record DROP-packages 
if [ "$DROPLOG" = "1" ]; then
   iptables -A INPUT -j LOG --log-prefix "** Firewall DROP **"
   iptables -A OUTPUT -j LOG --log-prefix "** Firewall DROP **"
   iptables -A FORWARD -j LOG --log-prefix "** Firewall DROP **"
fi

echo "done"

# if $skiptest values is not "1" ,that is user not use "start" parament ,
# so 7 secs later will auto clear ipatbles , that can avert that user 
# out firewall itself 

if [ "$skiptest" = "1" ]; then exit ;fi

echo -e "\n     TEST MODE"
echo -n "All chains will be cleaned after 7 sec."
i=1; while [ "$i" -le "3" ]; do
   echo -n "."
   i=`expr $i + 1`
   sleep 1
done
echo -en "\nFlushing ruleset..."
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -t filter -F
iptables -t nat -F
iptables -t filter -X
iptables -t nat -X
echo "ok"

